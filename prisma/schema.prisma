generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id              String    @id @default(uuid())
  name            String
  userId          String
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[] @relation("StoreToCategory")
  products        Product[]  @relation("StoreToProduct")
  sizes           Size[]     @relation("StoreToSize")
  colors          Color[]     @relation("StoreToColor")
  orders          Order[]     @relation("StoreToOrder")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Billboard {
  id          String @id @default(uuid())
  storeID     String
  store       Store @relation("StoreToBillboard", fields: [storeID], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeID])
}

model Category {
  id          String      @id @default(uuid())
  storeID     String      // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeID], references: [id])
  billboardID String      // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardID], references: [id])
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeID])
  @@index([billboardID])
}

model Product {
  id          String    @id @default(uuid())
  storeID     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeID], references: [id])
  categoryID  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryID], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String    // Foreign Key to Size
  size        Size      @relation(fields: [sizeId], references: [id])
  colorID     String    // Foreign Key to Color
  color       Color     @relation(fields: [colorID], references: [id])
  images      Image[]   // Relation to Image model
  orderItems  OrderItem[]   // Relation to Order model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeID])
  @@index([categoryID])
  @@index([sizeId])
  @@index([colorID])
}

model Order {
  id        String    @id @default(uuid())
  storeID     String    // Foreign Key to Store
  store       Store     @relation("StoreToOrder", fields: [storeID], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeID])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderID   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderID], references: [id])
  productID String  // Foreign Key to Product
  product   Product @relation(fields: [productID], references: [id])

  @@index([orderID])
  @@index([productID])
}

model Size {
  id          String    @id @default(uuid())
  storeID     String    // Foreign Key to Store
  store       Store     @relation("StoreToSize", fields: [storeID], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeID])
}

model Color {
  id          String   @id @default(uuid())
  storeID     String   // Foreign Key to Store
  store       Store    @relation("StoreToColor", fields: [storeID], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeID])
}

model Image {
  id          String   @id @default(uuid())
  productID   String   // Foreign Key to Product
  product     Product  @relation(fields: [productID], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productID])
}